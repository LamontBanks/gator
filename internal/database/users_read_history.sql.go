// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users_read_history.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPostInUserReadHistory = `-- name: CreatePostInUserReadHistory :one
INSERT INTO users_posts_history (id, created_at, updated_at, user_id, feed_id, post_id, has_viewed, is_bookmarked)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
)
RETURNING id, created_at, updated_at, user_id, feed_id, post_id, has_viewed, is_bookmarked
`

type CreatePostInUserReadHistoryParams struct {
	ID           uuid.UUID
	CreatedAt    time.Time
	UpdatedAt    time.Time
	UserID       uuid.UUID
	FeedID       uuid.UUID
	PostID       uuid.UUID
	HasViewed    bool
	IsBookmarked bool
}

func (q *Queries) CreatePostInUserReadHistory(ctx context.Context, arg CreatePostInUserReadHistoryParams) (UsersPostsHistory, error) {
	row := q.db.QueryRowContext(ctx, createPostInUserReadHistory,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
		arg.PostID,
		arg.HasViewed,
		arg.IsBookmarked,
	)
	var i UsersPostsHistory
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.PostID,
		&i.HasViewed,
		&i.IsBookmarked,
	)
	return i, err
}

const getPostFromUserReadHisory = `-- name: GetPostFromUserReadHisory :one
SELECT id, created_at, updated_at, user_id, feed_id, post_id, has_viewed, is_bookmarked FROM users_posts_history
WHERE user_id = $1 
        AND feed_id = $2
        AND post_id = $3
`

type GetPostFromUserReadHisoryParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
	PostID uuid.UUID
}

func (q *Queries) GetPostFromUserReadHisory(ctx context.Context, arg GetPostFromUserReadHisoryParams) (UsersPostsHistory, error) {
	row := q.db.QueryRowContext(ctx, getPostFromUserReadHisory, arg.UserID, arg.FeedID, arg.PostID)
	var i UsersPostsHistory
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.PostID,
		&i.HasViewed,
		&i.IsBookmarked,
	)
	return i, err
}

const markPostAsViewed = `-- name: MarkPostAsViewed :exec
UPDATE users_posts_history
SET has_viewed = true
WHERE user_id = $1 
    AND feed_id = $2
    AND post_id = $3
`

type MarkPostAsViewedParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
	PostID uuid.UUID
}

func (q *Queries) MarkPostAsViewed(ctx context.Context, arg MarkPostAsViewedParams) error {
	_, err := q.db.ExecContext(ctx, markPostAsViewed, arg.UserID, arg.FeedID, arg.PostID)
	return err
}
