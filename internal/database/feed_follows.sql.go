// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one


WITH new_feed_follow_row AS (
    INSERT INTO feed_follows (id, created_at, updated_at, user_id, feed_id)
    VALUES (
        $1,
        $2,
        $3,
        $4,
        $5
    )
    RETURNING id, created_at, updated_at, user_id, feed_id
)
SELECT new_feed_follow_row.id, new_feed_follow_row.created_at, new_feed_follow_row.updated_at, new_feed_follow_row.user_id, new_feed_follow_row.feed_id, users.name AS user_name, feeds.name AS feed_name
FROM new_feed_follow_row
INNER JOIN users ON new_feed_follow_row.user_id = users.id
INNER JOIN feeds ON new_feed_follow_row.feed_id = feeds.id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	UserName  string
	FeedName  string
}

// https://docs.sqlc.dev/en/latest/tutorials/getting-started-postgresql.html
// Common Table Expressions (CTE)
// Use result of query as temporary table for other parts of the query
// https://www.postgresql.org/docs/13/queries-with.html#QUERIES-WITH-CTE
// Add entry showing user follwed a feed, then returns the name of the user and feed
func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.UserName,
		&i.FeedName,
	)
	return i, err
}

const deleteFeedFollowForUser = `-- name: DeleteFeedFollowForUser :exec
DELETE FROM feed_follows
WHERE user_id = $1
AND feed_id = $2
`

type DeleteFeedFollowForUserParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
}

func (q *Queries) DeleteFeedFollowForUser(ctx context.Context, arg DeleteFeedFollowForUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollowForUser, arg.UserID, arg.FeedID)
	return err
}

const getFeedsForUser = `-- name: GetFeedsForUser :many
SELECT feed_follows.feed_id, feeds.description, feeds.name AS feed_name, feeds.url as feed_url 
FROM feed_follows
INNER JOIN feeds ON feed_follows.feed_id = feeds.id
WHERE feed_follows.user_id = $1
ORDER BY feeds.name ASC
`

type GetFeedsForUserRow struct {
	FeedID      uuid.UUID
	Description string
	FeedName    string
	FeedUrl     string
}

// Get all feeds the user is following
func (q *Queries) GetFeedsForUser(ctx context.Context, userID uuid.UUID) ([]GetFeedsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsForUserRow
	for rows.Next() {
		var i GetFeedsForUserRow
		if err := rows.Scan(
			&i.FeedID,
			&i.Description,
			&i.FeedName,
			&i.FeedUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedsNotFollowedByUser = `-- name: GetFeedsNotFollowedByUser :many
SELECT feeds.name, feeds.description, feeds.id, feeds.url
FROM feeds
WHERE feeds.id NOT IN (
	SELECT feed_follows.feed_id
	FROM feed_follows
	WHERE feed_follows.user_id = $1
)
ORDER BY feeds.name ASC
`

type GetFeedsNotFollowedByUserRow struct {
	Name        string
	Description string
	ID          uuid.UUID
	Url         string
}

// Get all feeds the user is NOT following
func (q *Queries) GetFeedsNotFollowedByUser(ctx context.Context, userID uuid.UUID) ([]GetFeedsNotFollowedByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsNotFollowedByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsNotFollowedByUserRow
	for rows.Next() {
		var i GetFeedsNotFollowedByUserRow
		if err := rows.Scan(
			&i.Name,
			&i.Description,
			&i.ID,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
